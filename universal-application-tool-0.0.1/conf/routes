# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index
# The root page, but requiring a login.
GET     /secure                     controllers.HomeController.secureIndex

# List all persons
GET     /postgres                   controllers.PostgresController.index()

# Add a person
POST    /postgres                   controllers.PostgresController.create(request: Request)
POST    /postgresSync               controllers.PostgresController.createSync(request: Request)

# A controller for pages for an admin to create and maintain programs
GET     /admin/programs                    controllers.admin.AdminProgramController.index
GET     /admin/programs/new                controllers.admin.AdminProgramController.newOne(request: Request)
GET     /admin/programs/:programId/edit    controllers.admin.AdminProgramController.edit(request: Request, programId: Long)
POST    /admin/programs                    controllers.admin.AdminProgramController.create(request: Request)
POST    /admin/programs/:programId         controllers.admin.AdminProgramController.update(request: Request, programId: Long)

# A controller for pages for an admin to create and maintain blocks for a program
GET     /admin/programs/:programId/blocks                    controllers.admin.AdminProgramBlocksController.index(programId: Long)
GET     /admin/programs/:programId/blocks/new                controllers.admin.AdminProgramBlocksController.create(programId: Long)
GET     /admin/programs/:programId/blocks/:blockId/edit      controllers.admin.AdminProgramBlocksController.edit(request: Request, programId: Long, blockId: Long)

# A controller for a page for an admin to view, edit, and create questions
GET     /admin/questions             controllers.admin.QuestionController.index(renderAs: String ?= "table")
GET     /admin/questions/new         controllers.admin.QuestionController.newOne(request: Request)
GET     /admin/questions/:path/edit  controllers.admin.QuestionController.edit(request: Request, path: String)
POST    /admin/questions/:id         controllers.admin.QuestionController.update(request: Request, id: Long)
POST    /admin/questions             controllers.admin.QuestionController.create(request: Request)

GET     /demo/new                   controllers.J2HtmlDemoController.newOne(request: Request)
POST    /demo                       controllers.J2HtmlDemoController.create(request: Request)

# Methods for applicants
GET     /applicants/:applicantId/programs                   controllers.applicant.ApplicantProgramsController.index(applicantId: Long)
GET     /applicants/:applicantId/programs/:programId/edit   controllers.applicant.ApplicantProgramsController.edit(applicantId: Long, programId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(file)

# Applicant program forms
GET     /applicants/:applicantId/programs/:programId/blocks/:blockId/edit   controllers.applicant.ApplicantProgramBlocksController.edit(request: Request, applicantId: Long, programId: Long, blockId: Long)
POST    /applicants/:applicantId/programs/:programId/blocks/:blockId        controllers.applicant.ApplicantProgramBlocksController.update(request: Request, applicantId: Long, programId: Long, blockId: Long)

# User profile pages
GET     /users/me                    controllers.ProfileController.myProfile(request: Request)
GET     /users/:id                   controllers.ProfileController.profilePage(request: Request, id: Long)

# Authentication callback from federated auth server
GET     /callback                    controllers.CallbackController.callback(request: Request, client_name: String)
POST    /callback                    controllers.CallbackController.callback(request: Request, client_name: String)

# Log into application
GET     /loginForm                   controllers.HomeController.loginForm(request: Request, message: java.util.Optional[String])

# Log out of application
GET     /logout                      @org.pac4j.play.LogoutController.logout(request: Request)

# Seed the database with test content to develop against
GET     /dev/seed                    controllers.dev.DatabaseSeedController.index(request: Request)
POST    /dev/seed                    controllers.dev.DatabaseSeedController.seed()
POST    /dev/seed                    controllers.dev.DatabaseSeedController.clear()
